req(input$compound)
df() %>%
filter(Compounds == input$compound,
Z.Score_ESet_mean >= input$zscore[1],
Z.Score_ESet_mean <= input$zscore[2])
})
top_mutants_data <- reactive({
filtered_data() %>%
arrange(Z.Score_ESet_mean) %>%
head(10) %>%
select(Mutants, Z.Score_ESet_mean, COG2, Gene) %>%
rename("Z-Score" = Z.Score_ESet_mean, "COG" = COG2)
})
output$topMutants2 <- renderDT({
top_mutants_data()
}, options = list(pageLength = 5))
output$volcanoPlot <- renderPlotly({
data <- filtered_data() %>%
mutate(color = case_when(
Z.Score_ESet_mean <= -1 ~ "red",
Z.Score_ESet_mean >= 1 ~ "blue",
TRUE ~ "grey"
))
# Global reactive
gene_affected_compounds <- reactive({
req(input$Gene)
df() %>%
filter(Gene == input$Gene, Z.Score_ESet_mean <= -5) %>%
arrange(Compounds, Z.Score_ESet_mean) %>%
group_by(Compounds) %>%
slice_min(Z.Score_ESet_mean, n = 1) %>%
ungroup() %>%
distinct(Compounds, Mutants, .keep_all = TRUE) %>%  # ensure uniqueness
mutate(`Z-Score` = round(Z.Score_ESet_mean, 2)) %>%
select(Compound = Compounds,
Mutant = Mutants,
`Z-Score`,
Gene,
COG = COG2)
})
output$mutantCompoundTable <- renderDT({
datatable(
gene_affected_compounds(),
selection = 'single',
options = list(
pageLength = 5,
columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center headers
),
rownames = FALSE,
class = 'cell-border stripe'
) %>% formatStyle(
columns = colnames(gene_affected_compounds()),
`text-align` = 'center'  # Center cell values
)
})
gene_compound_plot_data <- reactive({
req(input$Gene)
summary_df <- compound_gene_summary %>% filter(Gene == input$Gene)
stats_df <- compound_gene_stats %>% filter(Gene == input$Gene)
list(
data = summary_df,
affected_count = stats_df$AffectedCompounds,
total_compounds = stats_df$TotalCompounds,
percent = stats_df$PercentAffected
)
})
output$geneCompoundPlot <- renderPlotly({
info <- gene_compound_plot_data()
data <- info$data
label <- paste0(info$affected_count, " compounds affect ", input$Gene, " (Z ≤ -5)")
p <- ggplot(data, aes(x = reorder(Compound, Z.Score), y = Z.Score,
text = paste("Compound:", Compound, "<br>Mutant:", Mutant, "<br>Z-Score:", Z.Score))) +
geom_point(color = "steelblue", size = 2.5, alpha = 0.85) +
#geom_hline(aes(yintercept = -5, linetype = ""), color = "red") +
annotate("text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5, label = label, size = 5, fontface = "bold") +
labs(x = NULL, y = "Z-Score", linetype = "Z-Score = -5") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(size = 14),
legend.position = "top")
ggplotly(p, tooltip = "text")
})
observeEvent(input$mutantCompoundTable_rows_selected, {
selected_row <- input$mutantCompoundTable_rows_selected
if (!is.null(selected_row)) {
selected_compound <- gene_affected_compounds()$Compound[selected_row]
updateSelectInput(session, "compound", selected = selected_compound)
}
})
output$compoundSectionTitle <- renderUI({
req(input$Gene)
HTML(paste0("<h3>Chemical-Genetic Interaction Profile of <i>", input$Gene, "</i> </h3>"))
})
p <- ggplot(data, aes(x = Z.Score_ESet_mean, y = -log10(modified_padj),
color = color,
text = paste("Gene:", Gene, "<br>Mutants:", Mutants))) +
geom_point(alpha = 0.7) +
scale_color_identity() +
labs(title = paste("Volcano Plot for", input$compound),
x = "Z-Score", y = "-log10(Padj)") +
theme_minimal() + theme(legend.position = "none")
ggplotly(p, tooltip = "text") %>% layout(height = 320, showlegend = FALSE)
})
output$lipinskiImage <- renderUI({
img_data <- compound_images[[input$compound]]
if (!is.null(img_data)) {
tags$img(src = img_data, height = "150px")
} else {
tags$p("Image not available.")
}
})
output$lipinskiTable <- renderDT({
data <- lipinski_df() %>% filter(Compounds == input$compound)
if (nrow(data) > 0) {
data %>% select(-SMILES)
}
}, options = list(dom = 't'))
output$umapPlot <- renderPlot({
req(input$compound)
affected_compound_count <- reactive({
req(input$Gene)
count <- compound_counts %>%
filter(Gene == input$Gene) %>%
pull(AffectedCompounds)
if (length(count) == 0) count <- 0
count
})
gene_compound_plot_data <- reactive({
req(input$Gene)
# Use all interactions for the selected gene
data <- df() %>%
filter(Gene == input$Gene) %>%
group_by(Compounds) %>%
slice_min(Z.Score_ESet_mean, n = 1) %>%
ungroup() %>%
mutate(Z.Score = round(Z.Score_ESet_mean, 2))
# Count how many compounds are significant (Z ≤ -5)
total_compounds <- n_distinct(df()$Compounds)
affected_count <- n_distinct(data$Compounds[data$Z.Score <= -5])
percent <- round((affected_count / total_compounds) * 100, 2)
list(
data = data,
affected_count = affected_count,
total_compounds = total_compounds,
percent = percent
)
})
output$geneCompoundPlot <- renderPlotly({
info <- gene_compound_plot_data()
data <- info$data
label <- paste0(info$affected_count, " compounds affect ", input$Gene, " (Z ≤ -5)")
p <- ggplot(data, aes(x = reorder(Compounds, Z.Score), y = Z.Score,
text = paste("Compound:", Compounds, "<br>Mutant:", Mutants, "<br>Z-Score:", Z.Score))) +
geom_point(color = "darkblue", size = 1, alpha = 0.1) +
geom_hline(aes(yintercept = -5, linetype = "Z-Score = -5"), color = "red", linewidth = 0.2, linetype = "dashed") +
annotate("text", x = Inf, y = Inf,
label = "<span style='color:red;'>---</span> Z-Score = -5",
hjust = 0.5, vjust = 2, size = 5, family = "sans", parse = FALSE)+
annotate("text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.5,
label = label, size = 5, fontface = "bold") +
labs(x = NULL, y = "Z-Score", linetype = "") +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(size = 14),
plot.caption = ggtext::element_markdown()  # <- enable styled text
)
ggplotly(p, tooltip = "text")
})
output$compoundCountText <- renderUI({
req(input$Gene)
count <- affected_compound_count()
HTML(paste0("<h4><b>", count, "</b> compounds affect <i>", input$Gene, "</i> (Z-Score ≤ -5)</h4>"))
})
df <- tsne_data
df$Compounds_clean <- trimws(tolower(df$Compounds))
selected_compound <- trimws(tolower(input$compound))
# Cluster
set.seed(42)
kmeans_result <- kmeans(df[, c("V1", "V2")], centers = 10)
df$cluster <- as.factor(kmeans_result$cluster)
# Define groupings and color mapping
color_mapping <- c("rpoB" = "blue", "gyrB" = "red", "30s rRNA" = "orange", "dcw" = "purple")
# Identify Fill group of selected compound
selected_fill <- df %>% filter(Compounds_clean == selected_compound) %>% pull(Fill) %>% .[1]
selected_color <- if (selected_fill %in% names(color_mapping)) color_mapping[selected_fill] else "darkred"
# Set color and alpha per point
df$point_color <- "grey"
df$point_alpha <- 0.5
df$point_size <- 2.5
df$point_color[df$Compounds_clean == selected_compound] <- selected_color
df$point_alpha[df$Compounds_clean == selected_compound] <- 1
df$point_size[df$Compounds_clean == selected_compound] <- 2.5
# Plot base
p <- ggplot(df, aes(x = V1, y = V2)) +
geom_point(aes(color = point_color, alpha = point_alpha), size = 2.5) +
scale_color_identity() +
scale_alpha_identity() +
labs(x = "t-SNE Dimension I", y = "t-SNE Dimension II") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(size = 16)
)
# Determine selected compound's cluster
selected_cluster <- df %>%
filter(Compounds_clean == selected_compound) %>%
pull(cluster) %>% .[1]
# Draw hulls
for (cl in unique(df$cluster)) {
cluster_data <- df %>% filter(cluster == cl)
if (nrow(cluster_data) > 2) {
hull_indices <- chull(cluster_data$V1, cluster_data$V2)
hull_data <- cluster_data[hull_indices, ]
if (cl == selected_cluster) {
hull_fill <- alpha(selected_color, 0.15)
hull_border <- selected_color
} else {
hull_fill <- alpha("grey", 0.12)
hull_border <- "grey"
}
p <- p + geom_polygon(data = hull_data, aes(x = V1, y = V2),
fill = hull_fill, color = hull_border, linewidth = 0.4)
}
}
p
})
}
# === Launch the App ===
shinyApp(ui = ui, server = server)
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
install.packages("rcdk")
#install.packages("rcdk")
library(rcdk)
library(tidyverse)
#install.packages("rcdk")
install.packages('tidyverse')
#install.packages("rcdk")
#install.packages('tidyverse')
library(rcdk)
library(tidyverse)
# Load data
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Preprocess
df <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
kmeans_result <- kmeans(df[, c("V1", "V2")], centers = 10)
df$cluster <- as.factor(kmeans_result$cluster)
# Join SMILES info
compound_smiles <- lipinski_df %>% select(Compounds, SMILES)
df <- df %>% left_join(compound_smiles, by = c("Compounds" = "Compounds"))
# Function to compute Tanimoto similarity
compute_tanimoto <- function(smiles1, smiles2) {
mol1 <- parse.smiles(smiles1)[[1]]
mol2 <- parse.smiles(smiles2)[[1]]
fp1 <- get.fingerprint(mol1, type = "extended")
fp2 <- get.fingerprint(mol2, type = "extended")
distance(fp1, fp2, method = "tanimoto")
}
# For each cluster, compute Tanimoto scores relative to all other compounds in that cluster
tanimoto_scores <- df %>%
filter(!is.na(SMILES)) %>%
group_by(cluster) %>%
group_modify(~ {
reference <- .x$SMILES[match(tolower(.x$Compounds[1]), tolower(.x$Compounds))]  # or choose a smarter reference
.x %>%
rowwise() %>%
mutate(TanimotoScore = compute_tanimoto(reference, SMILES))
}) %>%
ungroup() %>%
select(Compounds, cluster, TanimotoScore)
#install.packages("rcdk")
#install.packages('tidyverse')
install.packages('fingerprint')
#install.packages("rcdk")
#install.packages('tidyverse')
#install.packages('fingerprint')
library(rcdk)
library(tidyverse)
library(fingerprint)
# Load data
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Add cluster
df <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
df$cluster <- as.factor(kmeans(df[, c("V1", "V2")], centers = 10)$cluster)
# Join SMILES
compound_smiles <- lipinski_df %>% select(Compounds, SMILES)
df <- df %>% left_join(compound_smiles, by = c("Compounds" = "Compounds"))
# Keep only compounds with SMILES
df <- df %>% filter(!is.na(SMILES))
# Precompute Tanimoto scores by cluster
tanimoto_scores <- df %>%
group_by(cluster) %>%
group_modify(~ {
# Parse SMILES into molecules
mols <- parse.smiles(.x$SMILES)
fps <- lapply(mols, get.fingerprint, type = "extended")
# Use the first compound in the cluster as reference
ref_fp <- fps[[1]]
sim_scores <- sapply(fps, function(fp) fp.sim.matrix(list(ref_fp, fp), method = "tanimoto")[1, 2])
.x %>%
mutate(TanimotoScore = round(sim_scores, 3))
}) %>%
ungroup() %>%
select(Compounds, cluster, TanimotoScore)
# Save as .rds
saveRDS(tanimoto_scores, "data/tanimoto_scores_by_cluster.rds")
library(shiny); runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
#install.packages("rcdk")
#install.packages('tidyverse')
#install.packages('fingerprint')
library(rcdk)
library(fingerprint)
library(tidyverse)
# Load inputs
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Preprocess
tsne_data <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
tsne_data$cluster <- as.factor(kmeans(tsne_data[, c("V1", "V2")], centers = 10)$cluster)
# Merge SMILES info
df <- tsne_data %>%
left_join(lipinski_df %>% select(Compounds, SMILES), by = c("Compounds"))
df <- df %>% filter(!is.na(SMILES))
# Compute pairwise Tanimoto within clusters
tanimoto_df <- df %>%
group_by(cluster) %>%
group_modify(~ {
compounds <- .x$Compounds
smiles_list <- .x$SMILES
mols <- parse.smiles(smiles_list)
fps <- lapply(mols, get.fingerprint, type = "extended")
# Compute pairwise tanimoto
score_matrix <- fp.sim.matrix(fps, method = "tanimoto")
# Extract long-form results
expand.grid(Query = compounds, Target = compounds, stringsAsFactors = FALSE) %>%
mutate(Cluster = .x$cluster[1],
Tanimoto = as.vector(score_matrix))
}) %>% ungroup()
#install.packages("rcdk")
#install.packages('tidyverse')
#install.packages('fingerprint')
library(rcdk)
library(fingerprint)
library(tidyverse)
# Load data
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Cluster compounds
tsne_data <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
tsne_data$cluster <- as.factor(kmeans(tsne_data[, c("V1", "V2")], centers = 10)$cluster)
# Merge SMILES
df <- tsne_data %>%
left_join(lipinski_df %>% select(Compounds, SMILES), by = "Compounds") %>%
filter(!is.na(SMILES))
# Function to compute similarity between one query and many targets
compute_tanimoto_against_all <- function(query_name, query_smiles, target_names, target_smiles, cluster_id) {
query_mol <- parse.smiles(query_smiles)[[1]]
query_fp <- get.fingerprint(query_mol, type = "extended")
target_fps <- lapply(parse.smiles(target_smiles), get.fingerprint, type = "extended")
sim_scores <- sapply(target_fps, function(fp) fp.sim(query_fp, fp, method = "tanimoto"))
tibble(
Query = query_name,
Target = target_names,
Cluster = cluster_id,
Tanimoto = round(sim_scores, 3)
)
}
# Compute scores
tanimoto_scores_all <- list()
for (clus in unique(df$cluster)) {
cat("Processing cluster:", clus, "\n")
sub_df <- df %>% filter(cluster == clus)
n <- nrow(sub_df)
for (i in seq_len(n)) {
query_name <- sub_df$Compounds[i]
query_smiles <- sub_df$SMILES[i]
target_names <- sub_df$Compounds
target_smiles <- sub_df$SMILES
scores <- compute_tanimoto_against_all(query_name, query_smiles, target_names, target_smiles, clus)
tanimoto_scores_all[[length(tanimoto_scores_all) + 1]] <- scores
}
}
#install.packages("rcdk")
#install.packages('tidyverse')
#install.packages('fingerprint')
library(rcdk)
library(fingerprint)
library(tidyverse)
# Load data
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Cluster compounds
tsne_data <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
tsne_data$cluster <- as.factor(kmeans(tsne_data[, c("V1", "V2")], centers = 10)$cluster)
# Merge SMILES
df <- tsne_data %>%
left_join(lipinski_df %>% select(Compounds, SMILES), by = "Compounds") %>%
filter(!is.na(SMILES))
# Function to compute similarity between one query and many targets
compute_tanimoto_against_all <- function(query_name, query_smiles, target_names, target_smiles, cluster_id) {
query_mol <- parse.smiles(query_smiles)[[1]]
query_fp <- get.fingerprint(query_mol, type = "extended")
target_fps <- lapply(parse.smiles(target_smiles), get.fingerprint, type = "extended")
sim_scores <- fp.sim.matrix(list(query_fp, target_fps), method = "tanimoto")[1, ]
tibble(
Query = query_name,
Target = target_names,
Cluster = cluster_id,
Tanimoto = round(sim_scores, 3)
)
}
# Compute scores
tanimoto_scores_all <- list()
for (clus in unique(df$cluster)) {
cat("Processing cluster:", clus, "\n")
sub_df <- df %>% filter(cluster == clus)
n <- nrow(sub_df)
for (i in seq_len(n)) {
query_name <- sub_df$Compounds[i]
query_smiles <- sub_df$SMILES[i]
target_names <- sub_df$Compounds
target_smiles <- sub_df$SMILES
scores <- compute_tanimoto_against_all(query_name, query_smiles, target_names, target_smiles, clus)
tanimoto_scores_all[[length(tanimoto_scores_all) + 1]] <- scores
}
}
#install.packages("rcdk")
#install.packages('tidyverse')
#install.packages('fingerprint')
library(rcdk)
library(fingerprint)
library(tidyverse)
# Load data
tsne_data <- readRDS("data/tsne_data.rds")
lipinski_df <- readRDS("data/lipinski.rds")
# Cluster compounds
tsne_data <- tsne_data %>%
mutate(Compounds_clean = trimws(tolower(Compounds)))
set.seed(42)
tsne_data$cluster <- as.factor(kmeans(tsne_data[, c("V1", "V2")], centers = 10)$cluster)
# Merge SMILES
df <- tsne_data %>%
left_join(lipinski_df %>% select(Compounds, SMILES), by = "Compounds") %>%
filter(!is.na(SMILES))
# Function to compute similarity between one query and many targets
compute_tanimoto_against_all <- function(query_name, query_smiles, target_names, target_smiles, cluster_id) {
# Parse query molecule
query_mol <- parse.smiles(query_smiles)[[1]]
query_fp <- get.fingerprint(query_mol, type = "extended")
# Parse and fingerprint target molecules
target_mols <- parse.smiles(target_smiles)
target_fps <- lapply(target_mols, get.fingerprint, type = "extended")
# Compute similarity of query_fp vs all target_fps
sim_scores <- fp.sim.matrix(list(query_fp), target_fps, method = "tanimoto")[1, ]
# Return long-form tibble
tibble(
Query = query_name,
Target = target_names,
Cluster = cluster_id,
Tanimoto = round(sim_scores, 3)
)
}
# Compute scores
tanimoto_scores_all <- list()
for (clus in unique(df$cluster)) {
cat("Processing cluster:", clus, "\n")
sub_df <- df %>% filter(cluster == clus)
n <- nrow(sub_df)
for (i in seq_len(n)) {
query_name <- sub_df$Compounds[i]
query_smiles <- sub_df$SMILES[i]
target_names <- sub_df$Compounds
target_smiles <- sub_df$SMILES
scores <- compute_tanimoto_against_all(query_name, query_smiles, target_names, target_smiles, clus)
tanimoto_scores_all[[length(tanimoto_scores_all) + 1]] <- scores
}
}
runApp('CGIP2025_APP_v2_250519.R')
runApp('CGIP2025_APP_v2_250519.R')
